#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
#           This file was automatically generated from src/transformers/models/fastconformer/modular_fastconformer.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_fastconformer.py file directly. One of our CI enforces this.
#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
# coding=utf-8
# Copyright 2025 The HuggingFace Inc. team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from ...configuration_utils import PretrainedConfig
from ...utils import logging


logger = logging.get_logger(__name__)


# Configuration
class FastConformerConfig(PretrainedConfig):
    r"""
    This is the configuration class to store the configuration of a [`FastConformerModel`]. It is used to instantiate a
    FastConformer model according to the specified arguments, defining the model architecture.

    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the
    documentation from [`PretrainedConfig`] for more information.

    Args:
        vocab_size (`int`, *optional*, defaults to 1024):
            Vocabulary size of the FastConformer model. Note: This parameter is not used in the FastConformer
            audio encoder but is required for HuggingFace framework compatibility.
        hidden_size (`int`, *optional*, defaults to 1024):
            Dimension of the layers and the hidden states.
        num_hidden_layers (`int`, *optional*, defaults to 24):
            Number of hidden layers in the Transformer encoder.
        num_attention_heads (`int`, *optional*, defaults to 8):
            Number of attention heads for each attention layer in the Transformer encoder.
        intermediate_size (`int`, *optional*, defaults to 4096):
            Dimension of the "intermediate" (often named feed-forward) layer in the Transformer encoder.
        hidden_act (`str` or `function`, *optional*, defaults to `"silu"`):
            The non-linear activation function (function or string) in the encoder and pooler.
        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):
            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.
        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):
            The dropout ratio for the attention probabilities.
        initializer_range (`float`, *optional*, defaults to 0.02):
            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.
        conv_kernel_size (`int`, *optional*, defaults to 9):
            The kernel size of the convolution layers in the Conformer block.
        subsampling_factor (`int`, *optional*, defaults to 8):
            The factor by which the input sequence is subsampled.
        subsampling_conv_channels (`int`, *optional*, defaults to 256):
            The number of channels in the subsampling convolution layers.
        num_mel_bins (`int`, *optional*, defaults to 128):
            Number of mel features.
        xscaling (`bool`, *optional*, defaults to `False`):
            Whether to apply input scaling to the model inputs.
        dropout_emb (`float`, *optional*, defaults to 0.0):
            The dropout ratio for embedding layers.
        encoder_layerdrop (`float`, *optional*, defaults to 0.1):
            The LayerDrop probability for the encoder.
        activation_dropout (`float`, *optional*, defaults to 0.1):
            The dropout ratio for activations inside the fully connected layer.
        use_bias (`bool`, *optional*, defaults to `False`):
            Whether to use bias in the linear layers.
        pad_token_id (`int`, *optional*, defaults to 0):
            The id of the padding token.
        bos_token_id (`int`, *optional*, defaults to 1):
            The id of the beginning-of-sequence token.
        eos_token_id (`int`, *optional*, defaults to 2):
            The id of the end-of-sequence token.
        tie_word_embeddings (`bool`, *optional*, defaults to `False`):
            Whether to tie word embeddings.
        use_cache (`bool`, *optional*, defaults to `False`):
            Whether to use cache. Not used in FastConformer but kept for compatibility.
        output_attentions (`bool`, *optional*, defaults to `False`):
            Whether to output attention weights.
        output_hidden_states (`bool`, *optional*, defaults to `False`):
            Whether to output hidden states.
    """

    model_type = "fastconformer"
    keys_to_ignore_at_inference = ["past_key_values"]

    def __init__(
        self,
        vocab_size=1024,
        hidden_size=1024,
        num_hidden_layers=24,
        num_attention_heads=8,
        intermediate_size=4096,
        hidden_act="silu",
        hidden_dropout_prob=0.1,
        attention_probs_dropout_prob=0.1,
        initializer_range=0.02,
        conv_kernel_size=9,
        subsampling_factor=8,
        subsampling_conv_channels=256,
        num_mel_bins=128,
        xscaling=False,
        dropout_emb=0.0,
        encoder_layerdrop=0.1,
        activation_dropout=0.1,
        use_bias=False,
        pad_token_id=0,
        bos_token_id=1,
        eos_token_id=2,
        tie_word_embeddings=False,
        use_cache=False,
        output_attentions=False,
        output_hidden_states=False,
        **kwargs,
    ):
        super().__init__(
            pad_token_id=pad_token_id,
            bos_token_id=bos_token_id,
            eos_token_id=eos_token_id,
            tie_word_embeddings=tie_word_embeddings,
            **kwargs,
        )

        # Core architecture parameters
        self.vocab_size = vocab_size
        self.hidden_size = hidden_size
        self.num_hidden_layers = num_hidden_layers
        self.num_attention_heads = num_attention_heads
        self.intermediate_size = intermediate_size
        self.hidden_act = hidden_act
        self.initializer_range = initializer_range

        # Dropout parameters
        self.hidden_dropout_prob = hidden_dropout_prob
        self.attention_probs_dropout_prob = attention_probs_dropout_prob
        self.activation_dropout = activation_dropout
        self.dropout_emb = dropout_emb
        self.encoder_layerdrop = encoder_layerdrop

        # FastConformer-specific parameters
        self.conv_kernel_size = conv_kernel_size
        self.subsampling_factor = subsampling_factor
        self.subsampling_conv_channels = subsampling_conv_channels
        self.num_mel_bins = num_mel_bins
        self.xscaling = xscaling
        self.use_bias = use_bias

        # Output control
        self.use_cache = use_cache
        self.output_attentions = output_attentions
        self.output_hidden_states = output_hidden_states

        # For compatibility with existing code
        self.d_model = hidden_size
        self.encoder_layers = num_hidden_layers
        self.encoder_attention_heads = num_attention_heads
        self.encoder_ffn_dim = intermediate_size
        self.dropout = hidden_dropout_prob
        self.attention_dropout = attention_probs_dropout_prob
        self.activation_function = hidden_act


class ParakeetCTCConfig(PretrainedConfig):
    r"""
    This is the configuration class to store the configuration of a [`ParakeetCTC`]. It is used to instantiate a
    Parakeet CTC model according to the specified arguments, defining the model architecture.

    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the
    documentation from [`PretrainedConfig`] for more information.

    Args:
        vocab_size (`int`, *optional*, defaults to 1024):
            Vocabulary size of the CTC head. Defines the number of different tokens that can be predicted by the model.
        blank_token_id (`int`, *optional*, defaults to 0):
            The id of the blank token used in CTC. Typically 0.
        pad_token_id (`int`, *optional*, defaults to 0):
            The id of the padding token.
        bos_token_id (`int`, *optional*, defaults to 1):
            The id of the beginning-of-sequence token.
        eos_token_id (`int`, *optional*, defaults to 2):
            The id of the end-of-sequence token.
        ctc_loss_reduction (`str`, *optional*, defaults to `"mean"`):
            The reduction method for CTC loss. Can be "mean", "sum", or "none".
        ctc_zero_infinity (`bool`, *optional*, defaults to `True`):
            Whether to set infinite losses to zero in CTC loss computation.
        fastconformer_config (`FastConformerConfig`, *optional*):
            Configuration for the FastConformer encoder.

    ```python
    >>> from transformers import ParakeetCTC, ParakeetCTCConfig

    >>> # Initializing a ParakeetCTC configuration
    >>> configuration = ParakeetCTCConfig()

    >>> # Initializing a model from the configuration
    >>> model = ParakeetCTC(configuration)

    >>> # Accessing the model configuration
    >>> configuration = model.config
    ```
    """

    model_type = "parakeet_ctc"
    keys_to_ignore_at_inference = ["past_key_values"]
    sub_configs = {
        "fastconformer_config": FastConformerConfig,
    }

    def __init__(
        self,
        vocab_size=1024,
        blank_token_id=0,
        pad_token_id=0,
        bos_token_id=1,
        eos_token_id=2,
        ctc_loss_reduction="mean",
        ctc_zero_infinity=True,
        fastconformer_config=None,
        **kwargs,
    ):
        super().__init__(
            pad_token_id=pad_token_id,
            bos_token_id=bos_token_id,
            eos_token_id=eos_token_id,
            **kwargs,
        )

        # CTC-specific parameters
        self.vocab_size = vocab_size
        self.blank_token_id = blank_token_id
        self.ctc_loss_reduction = ctc_loss_reduction
        self.ctc_zero_infinity = ctc_zero_infinity

        # FastConformer encoder configuration
        if fastconformer_config is None:
            self.fastconformer_config = FastConformerConfig()
            logger.info("fastconformer_config is None, using default FastConformer config.")
        elif isinstance(fastconformer_config, dict):
            self.fastconformer_config = FastConformerConfig(**fastconformer_config)
        elif isinstance(fastconformer_config, FastConformerConfig):
            self.fastconformer_config = fastconformer_config
        else:
            raise ValueError(
                f"fastconformer_config must be a dict, FastConformerConfig, or None, got {type(fastconformer_config)}"
            )


# Future decoder configurations - placeholders for later implementation
# class ParakeetTDTConfig(PretrainedConfig):
#     """Configuration for Parakeet TDT models (FastConformer + TDT decoder)"""
#     model_type = "parakeet_tdt"
#
# class ParakeetRNNTConfig(PretrainedConfig):
#     """Configuration for Parakeet RNNT models (FastConformer + RNN-T decoder)"""
#     model_type = "parakeet_rnnt"
#
# class CanaryAEDConfig(PretrainedConfig):
#     """Configuration for Canary models (FastConformer + AED decoder)"""
#     model_type = "canary"


__all__ = ["FastConformerConfig", "ParakeetCTCConfig"]
